.\" Man page generated from reStructuredText.
.
.TH "NIXOS-REBUILD" "8" "Jan 01, 1970" "" "NixOS Manual"
.SH NAME
nixos-rebuild \- reconfigure a NixOS machine
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
\fBnixos\-rebuild\fP [\fIOPTION\fP]... \fICOMMAND\fP
.SH DESCRIPTION
.sp
This command updates the system so that it corresponds to the
configuration specified in \fB/etc/nixos/configuration.nix\fP or
\fB/etc/nixos/flake.nix\fP\&. Thus, every time you modify the
configuration or any other NixOS module, you must run
\fBnixos\-rebuild\fP to make the changes take effect. It builds
the new system in \fB/nix/store\fP, runs its activation script, and
stop and (re)starts any system services if needed. Please note that
user services need to be started manually as they aren\(aqt detected by
the activation script at the moment.
.sp
This command has one required argument, which specifies the desired
operation. It must be one of the following:
.SH COMMNANDS
.SS switch
.INDENT 0.0
.INDENT 3.5
Build and activate the new configuration, and make it the boot default.
That is, the configuration is added to the GRUB boot menu as the default
menu entry, so that subsequent reboots will boot the system into the new
configuration. Previous configurations activated with
\fBnixos\-rebuild switch\fP or \fBnixos\-rebuild
boot\fP remain available in the GRUB menu.
.UNINDENT
.UNINDENT
.SS boot
.INDENT 0.0
.INDENT 3.5
Build the new configuration and make it the boot default (as with
\fBnixos\-rebuild switch\fP), but do not activate it. That
is, the system continues to run the previous configuration until the
next reboot.
.UNINDENT
.UNINDENT
.SS test
.INDENT 0.0
.INDENT 3.5
Build and activate the new configuration, but do not add it to the GRUB
boot menu. Thus, if you reboot the system (or if it crashes), you will
automatically revert to the default configuration (i.e. the
configuration resulting from the last call to \fBnixos\-rebuild
switch\fP or \fBnixos\-rebuild boot\fP).
.UNINDENT
.UNINDENT
.SS build
.INDENT 0.0
.INDENT 3.5
Build the new configuration, but neither activate it nor add it to the
GRUB boot menu. It leaves a symlink named \fBresult\fP in
the current directory, which points to the output of the top\-level
“system” derivation. This is essentially the same as doing
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nix\-build /path/to/nixpkgs/nixos \-A system
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that you do not need to be \fBroot\fP to run
\fBnixos\-rebuild build\fP\&.
.UNINDENT
.UNINDENT
.SS dry\-build
.INDENT 0.0
.INDENT 3.5
Show what store paths would be built or downloaded by any of the
operations above, but otherwise do nothing.
.UNINDENT
.UNINDENT
.SS dry\-activate
.INDENT 0.0
.INDENT 3.5
Build the new configuration, but instead of activating it, show what
changes would be performed by the activation (i.e. by
\fBnixos\-rebuild test\fP). For instance, this command will
print which systemd units would be restarted. The list of changes is not
guaranteed to be complete.
.UNINDENT
.UNINDENT
.SS edit
.INDENT 0.0
.INDENT 3.5
Opens \fBconfiguration.nix\fP in the default editor.
.UNINDENT
.UNINDENT
.SS build\-vm
.INDENT 0.0
.INDENT 3.5
Build a script that starts a NixOS virtual machine with the desired
configuration. It leaves a symlink \fBresult\fP in the
current directory that points (under
\fBresult/bin/run\-\fP)
at the script that starts the VM. Thus, to test a NixOS configuration in
a virtual machine, you should do the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nixos\-rebuild build\-vm$ ./result/bin/run\-\e*\-vm
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The VM is implemented using the \fBqemu\fP package. For
best performance, you should load the \fBkvm\-intel\fP or
\fBkvm\-amd\fP kernel modules to get hardware
virtualisation.
.sp
The VM mounts the Nix store of the host through the 9P file system. The
host Nix store is read\-only, so Nix commands that modify the Nix store
will not work in the VM. This includes commands such as
\fBnixos\-rebuild\fP; to change the VM’s configuration,
you must halt the VM and re\-run the commands above.
.sp
The VM has its own \fBext3\fP root file system, which is
automatically created when the VM is first started, and is persistent
across reboots of the VM. It is stored in
\fB\&./*hostname*.qcow2\fP\&.
.UNINDENT
.UNINDENT
.SS build\-vm\-with\-bootloader
.INDENT 0.0
.INDENT 3.5
Like , but boots using the regular boot loader
of your configuration (e.g., GRUB 1 or 2), rather than booting directly
into the kernel and initial ramdisk of the system. This allows you to
test whether the boot loader works correctly. However, it does not
guarantee that your NixOS configuration will boot successfully on the
host hardware (i.e., after running \fBnixos\-rebuild
switch\fP), because the hardware and boot loader configuration in
the VM are different. The boot loader is installed on an automatically
generated virtual disk containing a \fB/boot\fP
partition, which is mounted read\-only in the VM.
.UNINDENT
.UNINDENT
.SH OPTIONS
.sp
This command accepts the following options:
.SS \-\-upgrade
.INDENT 0.0
.INDENT 3.5
Fetch the latest version of NixOS from the NixOS channel.
.UNINDENT
.UNINDENT
.SS \-\-install\-bootloader
.INDENT 0.0
.INDENT 3.5
Causes the boot loader to be (re)installed on the device specified by the
relevant configuration options.
.UNINDENT
.UNINDENT
.SS \-\-no\-build\-nix
.INDENT 0.0
.INDENT 3.5
Normally, \fBnixos\-rebuild\fP first builds the
\fBnixUnstable\fP attribute in Nixpkgs, and uses the
resulting instance of the Nix package manager to build the new system
configuration. This is necessary if the NixOS modules use features not
provided by the currently installed version of Nix. This option disables
building a new Nix.
.UNINDENT
.UNINDENT
.SS \-\-fast
.INDENT 0.0
.INDENT 3.5
Equivalent to
\&. This option is useful if you call
\fBnixos\-rebuild\fP frequently (e.g. if you’re hacking on
a NixOS module).
.UNINDENT
.UNINDENT
.SS \-\-rollback
.INDENT 0.0
.INDENT 3.5
Instead of building a new configuration as specified by
\fB/etc/nixos/configuration.nix\fP, roll back to the
previous configuration. (The previous configuration is defined as the one
before the “current” generation of the Nix profile
\fB/nix/var/nix/profiles/system\fP\&.)
.UNINDENT
.UNINDENT
.SS \-\-builders
.sp
\fIbuilder\-spec\fP
.INDENT 0.0
.INDENT 3.5
Allow ad\-hoc remote builders for building the new system. This requires
the user executing \fBnixos\-rebuild\fP (usually root) to be
configured as a trusted user in the Nix daemon. This can be achieved by
using the \fBnix.trustedUsers\fP NixOS option. Examples
values for that option are described in the \fBRemote builds
chapter\fP in the Nix manual, (i.e. \fB\-\-builders
"ssh://bigbrother x86_64\-linux"\fP). By specifying an empty string
existing builders specified in \fB/etc/nix/machines\fP can
be ignored: \fB\-\-builders ""\fP for example when they are
not reachable due to network connectivity.
.UNINDENT
.UNINDENT
.SS \-\-profile\-name | \-p
.INDENT 0.0
.INDENT 3.5
Instead of using the Nix profile
\fB/nix/var/nix/profiles/system\fP to keep track of the
current and previous system configurations, use
\fB/nix/var/nix/profiles/system\-profiles/\fP\&.
When you use GRUB 2, for every system profile created with this flag,
NixOS will create a submenu named “NixOS \- Profile
\(aq\fIname\fP\(aq” in GRUB’s boot menu, containing
the current and previous configurations of this profile.
.sp
For instance, if you want to test a configuration file named
\fBtest.nix\fP without affecting the default system
profile, you would do:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nixos\-rebuild switch \-p test \-I nixos\-config=./test.nix
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The new configuration will appear in the GRUB 2 submenu “NixOS \-
Profile \(aqtest\(aq”.
.UNINDENT
.UNINDENT
.SS \-\-build\-host
.INDENT 0.0
.INDENT 3.5
Instead of building the new configuration locally, use the specified host
to perform the build. The host needs to be accessible with ssh, and must
be able to perform Nix builds. If the option
is not set, the build will be copied back
to the local machine when done.
.sp
Note that, if is not specified, Nix will
be built both locally and remotely. This is because the configuration
will always be evaluated locally even though the building might be
performed remotely.
.sp
You can include a remote user name in the host name
(\fIuser@host\fP). You can also set ssh options by
defining the NIX_SSHOPTS environment variable.
.UNINDENT
.UNINDENT
.SS \-\-target\-host
.INDENT 0.0
.INDENT 3.5
Specifies the NixOS target host. By setting this to something other than
\fIlocalhost\fP, the system activation will happen
on the remote host instead of the local machine. The remote host needs to
be accessible over ssh, and for the commands ,
and you need root access.
.sp
If is not explicitly specified,
will implicitly be set to the same value as
\&. So, if you only specify
both building and activation will take
place remotely (and no build artifacts will be copied to the local
machine).
.sp
You can include a remote user name in the host name
(\fIuser@host\fP). You can also set ssh options by
defining the NIX_SSHOPTS environment variable.
.UNINDENT
.UNINDENT
.SS \-\-use\-remote\-sudo
.INDENT 0.0
.INDENT 3.5
When set, nixos\-rebuild prefixes remote commands that run on
the and
systems with \fBsudo\fP\&. Setting this option allows
deploying as a non\-root user.
.UNINDENT
.UNINDENT
.SS \-\-flake
.sp
\fIflake\-uri*[*name\fP]
.INDENT 0.0
.INDENT 3.5
Build the NixOS system from the specified flake. It defaults to
the directory containing the target of the symlink
\fB/etc/nixos/flake.nix\fP, if it exists. The
flake must contain an output named
\fBnixosConfigurations.*name*\fP\&. If
\fIname\fP is omitted, it default to the
current host name.
.UNINDENT
.UNINDENT
.sp
In addition, \fBnixos\-rebuild\fP accepts various Nix\-related
flags, including / ,
, ,
and /
\&. See the Nix manual for details.
.SH ENVIRONMENT
.sp
NIXOS_CONFIG
.INDENT 0.0
.INDENT 3.5
Path to the main NixOS configuration module. Defaults to
\fB/etc/nixos/configuration.nix\fP\&.
.UNINDENT
.UNINDENT
.sp
NIX_SSHOPTS
.INDENT 0.0
.INDENT 3.5
Additional options to be passed to \fBssh\fP on the command
line.
.UNINDENT
.UNINDENT
.SH FILES
.sp
\fB/etc/nixos/flake.nix\fP
.INDENT 0.0
.INDENT 3.5
If this file exists, then \fBnixos\-rebuild\fP will
use it as if the option was given. This
file may be a symlink to a \fBflake.nix\fP in an
actual flake; thus \fB/etc/nixos\fP need not be a
flake.
.UNINDENT
.UNINDENT
.sp
\fB/run/current\-system\fP
.INDENT 0.0
.INDENT 3.5
A symlink to the currently active system configuration in the Nix store.
.UNINDENT
.UNINDENT
.sp
\fB/nix/var/nix/profiles/system\fP
.INDENT 0.0
.INDENT 3.5
The Nix profile that contains the current and previous system
configurations. Used to generate the GRUB boot menu.
.UNINDENT
.UNINDENT
.SH BUGS
.sp
This command should be renamed to something more descriptive.
.SH AUTHOR
Eelco Dolstra
.SH COPYRIGHT
1970, lewo
.\" Generated by docutils manpage writer.
.
